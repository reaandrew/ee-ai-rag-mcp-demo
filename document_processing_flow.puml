@startuml Document Processing Flow

!theme plain
skinparam sequenceMessageAlign center
skinparam responseMessageBelowArrow true
skinparam maxMessageSize 200
skinparam wrapWidth 200
skinparam backgroundColor white

actor User
participant "API Gateway" as APIGateway
participant "Auth Authorizer\nLambda" as Authorizer
participant "Document Status\nLambda" as StatusLambda
participant "Policy Search\nLambda" as PolicySearch
participant "S3 Raw PDFs\nBucket" as S3_Raw
participant "Text Extractor\nLambda" as Extractor
participant "Text Chunker\nLambda" as Chunker
participant "Vector Generator\nLambda" as VectorGen
participant "Bedrock\nTitan Embeddings" as BedrockTitan
participant "SNS Topic" as SNS
participant "Document Tracking\nLambda" as DocTrack
participant "DynamoDB\nTracking Table" as DynamoDB
participant "OpenSearch" as Search
participant "Bedrock\nClaude" as BedrockClaude

autonumber

== Document Upload and Text Extraction ==

User -> S3_Raw: Upload PDF document
activate S3_Raw
S3_Raw -> Extractor: S3 Event - Object Created
deactivate S3_Raw
activate Extractor

Extractor -> Extractor: Extract text from PDF using Textract
Extractor -> S3_Raw: Delete original PDF (optional)
Extractor -> "S3 Extracted Text": Store extracted text
Extractor -> SNS: Publish "Document Processing Started" event
deactivate Extractor

SNS -> DocTrack: Forward event
activate DocTrack
DocTrack -> DynamoDB: Create document tracking record\n(status: "PROCESSING")
deactivate DocTrack

== Text Chunking Phase ==

"S3 Extracted Text" -> Chunker: S3 Event - Object Created
activate Chunker
Chunker -> Chunker: Split text into chunks
Chunker -> "S3 Chunked Text": Store chunks and manifest
Chunker -> SNS: Publish "Document Processing Started" event
deactivate Chunker

SNS -> DocTrack: Forward event
activate DocTrack
DocTrack -> DynamoDB: Create document tracking record\n(status: "PROCESSING")
deactivate DocTrack

== Vector Generation and Indexing ==

"S3 Chunked Text" -> VectorGen: S3 Event - Object Created
activate VectorGen
VectorGen -> BedrockTitan: Request embeddings for text chunk
activate BedrockTitan
BedrockTitan --> VectorGen: Return vector embeddings
deactivate BedrockTitan
VectorGen -> Search: Index chunk with vector embedding
VectorGen -> SNS: Publish "Document Chunk Indexed" event
deactivate VectorGen

SNS -> DocTrack: Forward event
activate DocTrack
DocTrack -> DynamoDB: Increment indexed_chunks counter
deactivate DocTrack

note right of VectorGen
  VectorGen processes each chunk 
  separately and updates progress
  via SNS for each chunk
end note

== Document Completion ==

VectorGen -> SNS: Publish "Document Indexing Completed" event\n(when last chunk is processed)
activate SNS
SNS -> DocTrack: Forward event
deactivate SNS

activate DocTrack
DocTrack -> DynamoDB: Update document status to "COMPLETED"\nand set completion_time
deactivate DocTrack

== Document Status Query ==

User -> APIGateway: GET /status
activate APIGateway
APIGateway -> Authorizer: Validate Authorization token
activate Authorizer
Authorizer --> APIGateway: Authorization result
deactivate Authorizer

APIGateway -> StatusLambda: Forward request
activate StatusLambda
StatusLambda -> DynamoDB: Query for document statuses
activate DynamoDB
DynamoDB --> StatusLambda: Return document status records
deactivate DynamoDB
StatusLambda --> APIGateway: Return list of documents with status
deactivate StatusLambda
APIGateway --> User: JSON response with document statuses
deactivate APIGateway

== User Query and Response Generation ==

User -> APIGateway: POST /search
activate APIGateway
APIGateway -> Authorizer: Validate Authorization token
activate Authorizer
Authorizer --> APIGateway: Authorization result
deactivate Authorizer

APIGateway -> PolicySearch: Forward query
activate PolicySearch
PolicySearch -> BedrockTitan: Generate embeddings for query
activate BedrockTitan
BedrockTitan --> PolicySearch: Return query embeddings
deactivate BedrockTitan

PolicySearch -> Search: Vector similarity search with query embeddings
activate Search
Search --> PolicySearch: Return relevant document chunks
deactivate Search

PolicySearch -> BedrockClaude: Send prompt with context and query
activate BedrockClaude
BedrockClaude --> PolicySearch: Generate response with citations
deactivate BedrockClaude

PolicySearch --> APIGateway: Return formatted response with citations
deactivate PolicySearch
APIGateway --> User: Return response
deactivate APIGateway

@enduml