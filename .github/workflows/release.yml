name: Release and Deploy

on:
  workflow_run:
    workflows: ["Main Branch Quality Gate"]
    branches: [main]
    types:
      - completed

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write  # Needed for AWS auth

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: npm install

      - name: Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_OUTPUT=$(npx semantic-release)
          echo "release_output=$RELEASE_OUTPUT" >> $GITHUB_OUTPUT
          
          if [[ $RELEASE_OUTPUT == *"The next release version is"* ]]; then
            echo "new_release_published=true" >> $GITHUB_OUTPUT
            VERSION=$(echo "$RELEASE_OUTPUT" | grep -oP "The next release version is \K[0-9]+\.[0-9]+\.[0-9]+")
            echo "new_release_version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "new_release_published=false" >> $GITHUB_OUTPUT
          fi

  terraform:
    name: Terraform Deploy
    needs: release
    runs-on: ubuntu-latest
    if: ${{ needs.release.outputs.new_release_published == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.CI_ROLE_ARN }}
          aws-region: eu-west-2
          
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.7"
          
      - name: Terraform Init
        working-directory: ./terraform/app
        run: terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" -backend-config="region=eu-west-2" -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}" -backend-config="key=terraform/app/terraform.tfstate"
        
      - name: Terraform Plan
        working-directory: ./terraform/app
        run: terraform plan -var="environment=prod" -var="app_version=${{ needs.release.outputs.new_release_version }}" -var="raw_pdfs_bucket_name=ee-ai-rag-mcp-demo-raw-pdfs-${{ needs.release.outputs.new_release_version }}" -out=tfplan
        
      - name: Terraform Apply
        working-directory: ./terraform/app
        run: terraform apply -auto-approve tfplan