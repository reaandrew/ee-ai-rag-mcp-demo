name: Release and Deploy

on:
  workflow_run:
    workflows: ["Main Branch Quality Gate"]
    branches: [main]
    types:
      - completed

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write  # Needed for AWS auth

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: npm install

      - name: Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use semantic-release directly and save the exit code
          npx semantic-release || echo "Semantic release process completed"
          
          # Check if a new tag was created by looking at git tags
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [[ ! -z "$LATEST_TAG" ]]; then
            echo "new_release_published=true" >> $GITHUB_OUTPUT
            # Remove v prefix if present
            VERSION=${LATEST_TAG#v}
            echo "new_release_version=$VERSION" >> $GITHUB_OUTPUT
            echo "A new release was published: $VERSION"
          else
            echo "new_release_published=false" >> $GITHUB_OUTPUT
            echo "No new release was published"
          fi

  terraform:
    name: Terraform Deploy
    needs: release
    runs-on: ubuntu-latest
    if: ${{ needs.release.outputs.new_release_published == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ee-ai-rag-mcp-demo-ci-role
          role-session-name: GitHub_AWS_Terraform
          aws-region: eu-west-2
          
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.7"
          
      # Set environment variables for Terraform backend and variables
      - name: Set Terraform Environment Variables
        env:
          RELEASE_VERSION: ${{ needs.release.outputs.new_release_version }}
        run: |
          # Backend configuration
          echo "TF_STATE_BUCKET=ee-ai-rag-mcp-demo-terraform-state" >> $GITHUB_ENV
          echo "TF_LOCK_TABLE=ee-ai-rag-mcp-demo-terraform-locks" >> $GITHUB_ENV
          
          # Terraform variables
          echo "TF_VAR_environment=prod" >> $GITHUB_ENV
          echo "TF_VAR_app_version=${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "TF_VAR_raw_pdfs_bucket_name=ee-ai-rag-mcp-demo-raw-pdfs" >> $GITHUB_ENV  # Remove version from bucket name
          echo "TF_VAR_extracted_text_bucket_name=ee-ai-rag-mcp-demo-extracted-text" >> $GITHUB_ENV  # Add proper prefix
          echo "TF_VAR_extracted_text_prefix=ee-ai-rag-mcp-demo" >> $GITHUB_ENV
          
          # For debugging
          echo "Setting up Terraform for version: ${RELEASE_VERSION}"
          
      - name: Terraform Init
        working-directory: ./terraform/app
        run: terraform init -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" -backend-config="region=eu-west-2" -backend-config="dynamodb_table=${{ env.TF_LOCK_TABLE }}" -backend-config="key=terraform/app/terraform.tfstate"
        
      - name: Terraform Plan
        working-directory: ./terraform/app
        run: terraform plan -out=tfplan
        
      - name: Terraform Apply
        working-directory: ./terraform/app
        run: terraform apply -auto-approve tfplan
        
      - name: Display Terraform Outputs
        working-directory: ./terraform/app
        run: |
          echo "Terraform deployment completed successfully!"
          echo "Bucket Name: $(terraform output -raw raw_pdfs_bucket_name)"
          echo "Bucket ARN: $(terraform output -raw raw_pdfs_bucket_arn)"
          echo "Deployed Version: $(terraform output -raw deployed_version)"